// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/git-webhook-grpc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebHookSubscriber_Subscribe_FullMethodName = "/WebHookSubscriber/Subscribe"
)

// WebHookSubscriberClient is the client API for WebHookSubscriber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebHookSubscriberClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (WebHookSubscriber_SubscribeClient, error)
}

type webHookSubscriberClient struct {
	cc grpc.ClientConnInterface
}

func NewWebHookSubscriberClient(cc grpc.ClientConnInterface) WebHookSubscriberClient {
	return &webHookSubscriberClient{cc}
}

func (c *webHookSubscriberClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (WebHookSubscriber_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebHookSubscriber_ServiceDesc.Streams[0], WebHookSubscriber_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &webHookSubscriberSubscribeClient{stream}
	return x, nil
}

type WebHookSubscriber_SubscribeClient interface {
	Send(*ProjectRequest) error
	Recv() (*ProjectResponse, error)
	grpc.ClientStream
}

type webHookSubscriberSubscribeClient struct {
	grpc.ClientStream
}

func (x *webHookSubscriberSubscribeClient) Send(m *ProjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webHookSubscriberSubscribeClient) Recv() (*ProjectResponse, error) {
	m := new(ProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebHookSubscriberServer is the server API for WebHookSubscriber service.
// All implementations must embed UnimplementedWebHookSubscriberServer
// for forward compatibility
type WebHookSubscriberServer interface {
	Subscribe(WebHookSubscriber_SubscribeServer) error
	mustEmbedUnimplementedWebHookSubscriberServer()
}

// UnimplementedWebHookSubscriberServer must be embedded to have forward compatible implementations.
type UnimplementedWebHookSubscriberServer struct {
}

func (UnimplementedWebHookSubscriberServer) Subscribe(WebHookSubscriber_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWebHookSubscriberServer) mustEmbedUnimplementedWebHookSubscriberServer() {}

// UnsafeWebHookSubscriberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebHookSubscriberServer will
// result in compilation errors.
type UnsafeWebHookSubscriberServer interface {
	mustEmbedUnimplementedWebHookSubscriberServer()
}

func RegisterWebHookSubscriberServer(s grpc.ServiceRegistrar, srv WebHookSubscriberServer) {
	s.RegisterService(&WebHookSubscriber_ServiceDesc, srv)
}

func _WebHookSubscriber_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebHookSubscriberServer).Subscribe(&webHookSubscriberSubscribeServer{stream})
}

type WebHookSubscriber_SubscribeServer interface {
	Send(*ProjectResponse) error
	Recv() (*ProjectRequest, error)
	grpc.ServerStream
}

type webHookSubscriberSubscribeServer struct {
	grpc.ServerStream
}

func (x *webHookSubscriberSubscribeServer) Send(m *ProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webHookSubscriberSubscribeServer) Recv() (*ProjectRequest, error) {
	m := new(ProjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebHookSubscriber_ServiceDesc is the grpc.ServiceDesc for WebHookSubscriber service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebHookSubscriber_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebHookSubscriber",
	HandlerType: (*WebHookSubscriberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _WebHookSubscriber_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/git-webhook-grpc.proto",
}
