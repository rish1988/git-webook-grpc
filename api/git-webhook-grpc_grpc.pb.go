// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/git-webhook-grpc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientSidePush_Notify_FullMethodName = "/ClientSidePush/Notify"
)

// ClientSidePushClient is the client API for ClientSidePush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientSidePushClient interface {
	Notify(ctx context.Context, opts ...grpc.CallOption) (ClientSidePush_NotifyClient, error)
}

type clientSidePushClient struct {
	cc grpc.ClientConnInterface
}

func NewClientSidePushClient(cc grpc.ClientConnInterface) ClientSidePushClient {
	return &clientSidePushClient{cc}
}

func (c *clientSidePushClient) Notify(ctx context.Context, opts ...grpc.CallOption) (ClientSidePush_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientSidePush_ServiceDesc.Streams[0], ClientSidePush_Notify_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientSidePushNotifyClient{stream}
	return x, nil
}

type ClientSidePush_NotifyClient interface {
	Send(*ProjectUpdateInfo) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type clientSidePushNotifyClient struct {
	grpc.ClientStream
}

func (x *clientSidePushNotifyClient) Send(m *ProjectUpdateInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientSidePushNotifyClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientSidePushServer is the server API for ClientSidePush service.
// All implementations must embed UnimplementedClientSidePushServer
// for forward compatibility
type ClientSidePushServer interface {
	Notify(ClientSidePush_NotifyServer) error
	mustEmbedUnimplementedClientSidePushServer()
}

// UnimplementedClientSidePushServer must be embedded to have forward compatible implementations.
type UnimplementedClientSidePushServer struct {
}

func (UnimplementedClientSidePushServer) Notify(ClientSidePush_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedClientSidePushServer) mustEmbedUnimplementedClientSidePushServer() {}

// UnsafeClientSidePushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientSidePushServer will
// result in compilation errors.
type UnsafeClientSidePushServer interface {
	mustEmbedUnimplementedClientSidePushServer()
}

func RegisterClientSidePushServer(s grpc.ServiceRegistrar, srv ClientSidePushServer) {
	s.RegisterService(&ClientSidePush_ServiceDesc, srv)
}

func _ClientSidePush_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientSidePushServer).Notify(&clientSidePushNotifyServer{stream})
}

type ClientSidePush_NotifyServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*ProjectUpdateInfo, error)
	grpc.ServerStream
}

type clientSidePushNotifyServer struct {
	grpc.ServerStream
}

func (x *clientSidePushNotifyServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientSidePushNotifyServer) Recv() (*ProjectUpdateInfo, error) {
	m := new(ProjectUpdateInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientSidePush_ServiceDesc is the grpc.ServiceDesc for ClientSidePush service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientSidePush_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientSidePush",
	HandlerType: (*ClientSidePushServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _ClientSidePush_Notify_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/git-webhook-grpc.proto",
}

const (
	ServerSidePush_Notify_FullMethodName = "/ServerSidePush/Notify"
)

// ServerSidePushClient is the client API for ServerSidePush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerSidePushClient interface {
	Notify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ServerSidePush_NotifyClient, error)
}

type serverSidePushClient struct {
	cc grpc.ClientConnInterface
}

func NewServerSidePushClient(cc grpc.ClientConnInterface) ServerSidePushClient {
	return &serverSidePushClient{cc}
}

func (c *serverSidePushClient) Notify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ServerSidePush_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerSidePush_ServiceDesc.Streams[0], ServerSidePush_Notify_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverSidePushNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerSidePush_NotifyClient interface {
	Recv() (*ProjectUpdateInfo, error)
	grpc.ClientStream
}

type serverSidePushNotifyClient struct {
	grpc.ClientStream
}

func (x *serverSidePushNotifyClient) Recv() (*ProjectUpdateInfo, error) {
	m := new(ProjectUpdateInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerSidePushServer is the server API for ServerSidePush service.
// All implementations must embed UnimplementedServerSidePushServer
// for forward compatibility
type ServerSidePushServer interface {
	Notify(*emptypb.Empty, ServerSidePush_NotifyServer) error
	mustEmbedUnimplementedServerSidePushServer()
}

// UnimplementedServerSidePushServer must be embedded to have forward compatible implementations.
type UnimplementedServerSidePushServer struct {
}

func (UnimplementedServerSidePushServer) Notify(*emptypb.Empty, ServerSidePush_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedServerSidePushServer) mustEmbedUnimplementedServerSidePushServer() {}

// UnsafeServerSidePushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerSidePushServer will
// result in compilation errors.
type UnsafeServerSidePushServer interface {
	mustEmbedUnimplementedServerSidePushServer()
}

func RegisterServerSidePushServer(s grpc.ServiceRegistrar, srv ServerSidePushServer) {
	s.RegisterService(&ServerSidePush_ServiceDesc, srv)
}

func _ServerSidePush_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerSidePushServer).Notify(m, &serverSidePushNotifyServer{stream})
}

type ServerSidePush_NotifyServer interface {
	Send(*ProjectUpdateInfo) error
	grpc.ServerStream
}

type serverSidePushNotifyServer struct {
	grpc.ServerStream
}

func (x *serverSidePushNotifyServer) Send(m *ProjectUpdateInfo) error {
	return x.ServerStream.SendMsg(m)
}

// ServerSidePush_ServiceDesc is the grpc.ServiceDesc for ServerSidePush service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerSidePush_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerSidePush",
	HandlerType: (*ServerSidePushServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _ServerSidePush_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/git-webhook-grpc.proto",
}
